# Copyright 2024 Cisco Systems, Inc. and its affiliates
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

---

# Example topology deployed according to:
#
# https://www.cisco.com/c/en/us/td/docs/routers/sdwan/configuration/sdwan-xe-gs-book/controller-aws.html


- name: Verify boto3 and botocore dependecies for amazon.aws collection
  ansible.builtin.include_role:
    name: common
    tasks_from: aws_boto3_requirements

- name: Verify if user session with AWS is active
  ansible.builtin.include_role:
    name: common
    tasks_from: aws_user_session_probe

- name: Discover required information about network infrastructure if user didn't provide configuration already
  when:
    - aws_vpc_config is not defined
    - aws_security_group_config is not defined
    - aws_sunbnets_config is not defined
  block:
    - name: Gather network resources information
      ansible.builtin.include_role:
        name: aws_network_infrastructure
        tasks_from: aws_gather_network_resources.yml

    - name: Set reusable infrastructure facts from discovered variables
      ansible.builtin.set_fact:
        aws_vpc_config: "{{ aws_discovered_vpc }}"
        aws_security_group_config: "{{ aws_discovered_security_group }}"
        aws_subnets_config: "{{ aws_discovered_subnets }}"

- name: Assert all required variables for AWS controllers deployment
  ansible.builtin.include_role:
    name: common
    tasks_from: required_variables
    defaults_from: aws_required_vars_controllers.yml

- name: "Prepare directory for results, path: {{ results_dir }}"
  ansible.builtin.file:
    path: "{{ results_dir }}"
    state: directory
    mode: "0755"

- name: Verify if inside specified VPC there are already existing instances that match requested instances
  ansible.builtin.include_role:
    name: common
    tasks_from: aws_existing_instances.yml
  vars:
    instances_marked_for_deployment: "{{ manager_instances + vbond_instances + vsmart_instances }}"

# cloud-init vBond data requires information about private IP assigned to mgmt interface
# cloud-init templates require information about vBond IP
# vbond_mgmt_private_ip & ec2_vbond_mgmt_public_ip
# That are the reasons why vBond has to go up first (if we will use static IPs it can be changed)

- name: Define deployment facts - that will be consumed by Manager-client in Ansible
  ansible.builtin.set_fact:
    deployment_facts:
      vbond_instances: []
      manager_instances: []
      vsmart_instances: []

- name: Deploy vBond - Create ec2 instances
  ansible.builtin.include_tasks: aws_vbond_ec2_instance.yml
  vars:
    hostname: "{{ instance_item.hostname }}"
    system_ip: "{{ instance_item.system_ip }}"
    site_id: "{{ instance_item.site_id }}"
  loop: "{{ vbond_instances }}"
  loop_control:
    loop_var: instance_item
  when: vbond_instances is defined and (instance_item.hostname not in instances_info or not instances_info[instance_item.hostname])

- name: Deploy Manager - Create ec2 instances
  ansible.builtin.include_tasks: aws_manager_ec2_instance.yml
  vars:
    hostname: "{{ instance_item.hostname }}"
    system_ip: "{{ instance_item.system_ip }}"
    site_id: "{{ instance_item.site_id }}"
    persona: "{{ instance_item.persona }}"
  loop: "{{ manager_instances }}"
  loop_control:
    loop_var: instance_item
  when: manager_instances is defined and (instance_item.hostname not in instances_info or not instances_info[instance_item.hostname])

- name: Deploy vSmart - Create ec2 instances
  ansible.builtin.include_tasks: aws_vsmart_ec2_instance.yml
  vars:
    hostname: "{{ instance_item.hostname }}"
    system_ip: "{{ instance_item.system_ip }}"
    site_id: "{{ instance_item.site_id }}"
  loop: "{{ vsmart_instances }}"
  loop_control:
    loop_var: instance_item
  when: vsmart_instances is defined and (instance_item.hostname not in instances_info or not instances_info[instance_item.hostname])

- name: Extract deployment facts
  ansible.builtin.include_role:
    name: common
    tasks_from: generate_deployment_facts_controllers.yml
  when: deployment_facts.vbond_instances | length > 0 or deployment_facts.manager_instances | length > 0 or deployment_facts.vsmart_instances | length > 0

- name: Check reachability of Manager instance with SSH probe
  ansible.builtin.include_role:
    name: common
    tasks_from: wait_for_ssh_readiness
  vars:
    ssh_readiness_delay: 60
    ssh_readiness_timeout: 600
    ssh_readiness_instances: "{{ deployment_facts.manager_instances }}"
  when: manager_instances is defined and deployment_facts.manager_instances | length > 0
