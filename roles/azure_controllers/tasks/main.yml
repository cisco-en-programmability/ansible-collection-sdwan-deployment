# Copyright 2024 Cisco Systems, Inc. and its affiliates
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Verify if user session with Azure is active
  ansible.builtin.include_role:
    name: common
    tasks_from: az_user_session_probe

- name: Assert all required variables for Azure controllers deployment
  ansible.builtin.include_role:
    name: common
    tasks_from: required_variables
    defaults_from: az_required_vars_controllers.yml

- name: "Check if the value of hostname has length of 32 or less"
  ansible.builtin.assert:
    that:
      - instance_item.hostname | length > 0
      - instance_item.hostname | length <= 32
    fail_msg: "Verification for hostname failed, wrong hostname: {{ instance_item.hostname }}"
  loop: "{{ manager_instances + validator_instances + controller_instances }}"
  loop_control:
    loop_var: instance_item
    label: "{{ instance_item.hostname }}"

- name: "Replace underscores with hyphens in the az_resources_prefix string"
  ansible.builtin.set_fact:
    az_resources_prefix: "{{ az_resources_prefix | replace('_', '-') }}"

- name: "Prepare directory for results, path: {{ results_dir }}"
  ansible.builtin.file:
    path: "{{ results_dir }}"
    state: directory
    mode: "0755"

- name: Verify if inside specified VN there are already existing instances that match requested instances
  ansible.builtin.include_role:
    name: common
    tasks_from: az_existing_instances.yml
  vars:
    instances_marked_for_deployment: "{{ manager_instances + validator_instances + controller_instances }}"

- name: Define deployment facts - that will be consumed by Manager-client in Ansible
  ansible.builtin.set_fact:
    deployment_facts:
      validator_instances: []
      manager_instances: []
      controller_instances: []

- name: Deploy Validator - Create Virtual Machines
  ansible.builtin.include_tasks: azure_validator_vm.yml
  vars:
    hostname: "{{ instance_item.hostname }}"
    system_ip: "{{ instance_item.system_ip }}"
    site_id: "{{ instance_item.site_id }}"
  loop: "{{ validator_instances }}"
  loop_control:
    loop_var: instance_item
  when: validator_instances is defined and (instance_item.hostname not in instances_info or not instances_info[instance_item.hostname])

- name: "Check if validator_transport_public_ip is defined"
  ansible.builtin.pause:
    prompt: |

      Current run of playbook will not deploy or redeploy Validator machine.
      In order to correctly build overlay network, validator transport public ip is required.
      Please provide value for validator_transport_public_ip or leave empty for default one (192.168.1.199)

  when:
    - validator_transport_public_ip is not defined
    - validator_instances is defined
    - (validator_instances | first).hostname in instances_info or instances_info[(validator_instances | first).hostname]
  register: user_response

- name: "Verify user input for validator_transport_public_ip if provided"
  when:
    - user_response is defined
    - user_response.user_input is defined
  block:
    - name: "Set validator_transport_public_ip variable from user input if provided"
      ansible.builtin.set_fact:
        validator_transport_public_ip: "{{ user_response.user_input if user_response.user_input != '' else default_validator_ip }}"

    - name: "Validate validator_transport_public_ip input"
      ansible.builtin.fail:
        msg: "Invalid input '{{ validator_transport_public_ip }}'. You must enter valid ip address or leave empty for default."
      when:
        - not (validator_transport_public_ip is ansible.utils.ipv4)

    - name: "Show provided value for validator_transport_public_ip"
      ansible.builtin.debug:
        msg: |
          User provided value for validator_transport_public_ip:

          {{ validator_transport_public_ip }}


- name: "Deploy Controller - Create Virtual Machines"
  ansible.builtin.include_tasks: azure_controller_vm.yml
  vars:
    hostname: "{{ instance_item.hostname }}"
    system_ip: "{{ instance_item.system_ip }}"
    site_id: "{{ instance_item.site_id }}"
  loop: "{{ controller_instances }}"
  loop_control:
    loop_var: instance_item
  when: controller_instances is defined and (instance_item.hostname not in instances_info or not instances_info[instance_item.hostname])

- name: "Deploy Manager - Create Virtual Machines"
  ansible.builtin.include_tasks: azure_manager_vm.yml
  vars:
    hostname: "{{ instance_item.hostname }}"
    system_ip: "{{ instance_item.system_ip }}"
    site_id: "{{ instance_item.site_id }}"
    persona: "{{ instance_item.persona }}"
  loop: "{{ manager_instances }}"
  loop_control:
    loop_var: instance_item
  when: manager_instances is defined and (instance_item.hostname not in instances_info or not instances_info[instance_item.hostname])

- name: "Extract deployment facts"
  ansible.builtin.include_role:
    name: common
    tasks_from: generate_deployment_facts_controllers.yml
  when: >
    deployment_facts.validator_instances | length > 0 or deployment_facts.manager_instances | length > 0 or deployment_facts.controller_instances | length > 0

- name: "Check reachability of Manager instance with SSH probe"
  ansible.builtin.include_role:
    name: common
    tasks_from: wait_for_ssh_readiness
  vars:
    ssh_readiness_delay: 60
    ssh_readiness_timeout: 900
    ssh_readiness_instances: "{{ deployment_facts.manager_instances }}"
  when: manager_instances is defined and deployment_facts.manager_instances | length > 0
