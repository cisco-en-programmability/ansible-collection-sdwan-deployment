# Copyright 2024 Cisco Systems, Inc. and its affiliates
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

---

- name: "Set facts for subnets used in vManage deployment"
  ansible.builtin.set_fact:
    transport_subnet: "{{ az_subnets | selectattr('type', 'equalto', 'transport') | first }}"
    mgmt_subnet: "{{ az_subnets | selectattr('type', 'equalto', 'mgmt') | first }}"
    cluster_subnet: "{{ az_subnets | selectattr('type', 'equalto', 'cluster') | first | default(omit) }}"

- name: "Create public IP addresses for machine: {{ hostname }}"
  azure.azcollection.azure_rm_publicipaddress:
    resource_group: "{{ az_resource_group }}"
    allocation_method: static
    name: "public-ip-{{ hostname }}-vpn-{{ subnet_item.VPN }}"
    tags:
      Name: "public-ip-{{ hostname }}"
      Creator: "{{ az_tag_creator }}"
      Machine: "{{ hostname }}"
      VPN: "{{ subnet_item.VPN }}"
      Subnet: "{{ subnet_item.name }}"
      type: "{{ subnet_item.type }}"
  loop:
    - "{{ mgmt_subnet }}"
    - "{{ transport_subnet }}"
  loop_control:
    loop_var: subnet_item
  register: public_ip_addresses

- name: "Get info about NSG: {{ az_network_security_group }}"
  azure.azcollection.azure_rm_securitygroup_info:
    resource_group: "{{ az_resource_group }}"
    name: "{{ az_network_security_group }}"
  register: az_res_gr

- name: "Extend Network Security Group for machine. NSG: {{ az_network_security_group }}"
  azure.azcollection.azure_rm_securitygroup:
    resource_group: "{{ az_resource_group }}"
    name: "{{ az_network_security_group }}"
    rules:
      - name: "{{ public_ip_state.state.name }}"
        protocol: "*"
        destination_port_range: "*"
        source_port_range: "*"
        source_address_prefix: "{{ public_ip_state.state.ip_address }}"
        access: Allow
        priority: "{{ 2500 + ((az_res_gr.securitygroups | first).rules | length) + 1 + my_idx }}"
        direction: Inbound
    tags:
      Name: "{{ az_network_security_group }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
  loop: "{{ public_ip_addresses.results }}"
  loop_control:
    loop_var: public_ip_state
    index_var: my_idx
    label: public_ip_state.state.name
  when:
    - public_ip_state.state is defined
    - public_ip_state.state.name not in az_res_gr.securitygroups | map(attribute='rules') | flatten | map(attribute='name') | list

- name: "Create virtual network interface cards for public interfaces"
  azure.azcollection.azure_rm_networkinterface:
    resource_group: "{{ az_resource_group }}"
    name: "nic-{{ hostname }}-{{ public_ip_state.state.tags.type }}-vpn-{{ public_ip_state.state.tags.VPN }}"
    virtual_network: "{{ az_virtual_network }}"
    subnet_name: "{{ public_ip_state.state.tags.Subnet }}"
    security_group: "{{ az_network_security_group }}"
    ip_configurations:
      - name: "ipconfig-vpn-{{ public_ip_state.state.tags.VPN }}"
        public_ip_address_name: "{{ public_ip_state.state.name }}"
        private_ip_allocation_method: "Dynamic"
    tags:
      Name: "nic-{{ hostname }}-{{ public_ip_state.state.tags.type }}-vpn-{{ public_ip_state.state.tags.VPN }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
      VPN: "{{ public_ip_state.state.tags.VPN }}"
      type: "{{ public_ip_state.state.tags.type }}"
  loop: "{{ public_ip_addresses.results }}"
  loop_control:
    loop_var: public_ip_state
    index_var: my_idx
    label: public_ip_state.state.name
  register: vmanage_nics
  when:
    - public_ip_state.state is defined

- name: "Create virtual network interface card if cluster deployment"
  azure.azcollection.azure_rm_networkinterface:
    resource_group: "{{ az_resource_group }}"
    name: "nic-{{ hostname }}-{{ cluster_subnet.type }}-vpn-{{ cluster_subnet.VPN }}"
    virtual_network: "{{ az_virtual_network }}"
    subnet_name: "{{ cluster_subnet.name }}"
    security_group: "{{ az_network_security_group }}"
    ip_configurations:
      - name: "ipconfig-vpn-{{ cluster_subnet.VPN }}"
        private_ip_allocation_method: "Dynamic"
    tags:
      Name: "nic-{{ hostname }}-{{ cluster_subnet.type }}-vpn-{{ cluster_subnet.VPN }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
      VPN: "{{ cluster_subnet.VPN }}"
      type: "{{ cluster_subnet.type }}"
  register: cluster_vmanage_nic
  when:
    - cluster_subnet is defined
    - cluster_subnet != ""

- name: "Get info about NSG: {{ az_network_security_group }}"
  azure.azcollection.azure_rm_securitygroup_info:
    resource_group: "{{ az_resource_group }}"
    name: "{{ az_network_security_group }}"
  register: az_res_gr
  when:
    - cluster_subnet is defined
    - cluster_subnet != ""

- name: "Extend Network Security Group for cluster deployment. NSG: {{ az_network_security_group }}"
  azure.azcollection.azure_rm_securitygroup:
    resource_group: "{{ az_resource_group }}"
    name: "{{ az_network_security_group }}"
    rules:
      - name: "{{ cluster_vmanage_nic.state.name }}"
        protocol: "*"
        destination_port_range: "*"
        source_port_range: "*"
        source_address_prefix: "{{ cluster_vmanage_nic.state.ip_configuration.private_ip_address }}"
        access: Allow
        priority: "{{ 2500 + ((az_res_gr.securitygroups | first).rules | length) + 1 }}"
        direction: Inbound
    tags:
      Name: "{{ az_network_security_group }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
  when:
    - cluster_subnet is defined
    - cluster_subnet != ""

- name: Set az_network_interfaces_vmanage fact with a list of interfaces for vmanage
  ansible.builtin.set_fact:
    az_network_interfaces_vmanage: "{{ (vmanage_nics.results + [cluster_vmanage_nic]) | selectattr('state', 'defined') | map(attribute='state') | list }}"
    az_public_ip_addresses_vmanage: "{{ public_ip_addresses.results | selectattr('state', 'defined') | map(attribute='state') | list }}"

- name: Filter az_network_interfaces_vmanage for instance creation. Set az_mgmt_nic and az_transport_nic facts
  ansible.builtin.set_fact:
    az_mgmt_nic: "{{ az_network_interfaces_vmanage | selectattr('tags.type', 'equalto', 'mgmt') | list | first }}"
    az_transport_nic: "{{ az_network_interfaces_vmanage | selectattr('tags.type', 'equalto', 'transport') | list | first }}"
    az_cluster_nic: "{{ az_network_interfaces_vmanage | selectattr('tags.type', 'equalto', 'cluster') | list | first | default(omit) }}"
    az_mgmt_public_ip: "{{ az_public_ip_addresses_vmanage | selectattr('tags.type', 'equalto', 'mgmt') | list | first }}"
    az_transport_public_ip: "{{ az_public_ip_addresses_vmanage | selectattr('tags.type', 'equalto', 'transport') | list | first }}"

- name: Prepare nics_ids_list variable for VM creation
  ansible.builtin.set_fact:
    nics_ids_list: []

- name: "Set NICs IDs to be consumed by VM creation"
  ansible.builtin.set_fact:
    nics_ids_list: "{{ nics_ids_list + [nic_item.id] }}"
  loop: >
    {{
        [az_mgmt_nic, az_transport_nic]
        + ([az_cluster_nic] if az_cluster_nic is defined else [])
    }}
  loop_control:
    loop_var: nic_item
    label: "{{ nic_item.id | default(omit) }}"
  when: nic_item.id is defined

- name: "Set vmanage facts"
  ansible.builtin.set_fact:
    vmanage_mgmt_private_ip: "{{ az_mgmt_nic.ip_configuration.private_ip_address }}"
    vmanage_transport_private_ip: "{{ az_transport_nic.ip_configuration.private_ip_address }}"
    vmanage_mgmt_public_ip: "{{ az_mgmt_public_ip.ip_address }}"
    vmanage_transport_public_ip: "{{ az_transport_public_ip.ip_address }}"
    vmanage_persona: "{{ persona | default(vmanage_default_persona) }}"

- name: "Set vmanage cluster related facts"
  ansible.builtin.set_fact:
    vmanage_cluster_private_ip: "{{ az_cluster_nic.ip_configuration.private_ip_address }}"
    vmanage_cluster_prefix: "{{ cluster_subnet.cidr | ansible.utils.ipaddr('prefix') }}"
  when:
    - az_cluster_nic is defined
    - cluster_subnet is defined

- name: "Set vpn0_default_gateway fact from VPN 0 subnet value"
  ansible.builtin.set_fact:
    vpn0_default_gateway: "{{ subnet.cidr | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
  loop: "{{ az_subnets }}"
  loop_control:
    loop_var: subnet
  when:
    - subnet.VPN == 0
    - subnet.type == "transport"

- name: "Set path for bootstrap configuration: {{ userdata_vmanage_path }}-{{ hostname }}"
  ansible.builtin.set_fact:
    generated_userdata_vmanage: "{{ userdata_vmanage_path }}-{{ hostname }}"
  changed_when: true

- name: "Template userdata file for vmanage: {{ hostname }}"
  ansible.builtin.template:
    src: ./userdata_vmanage.j2
    dest: "{{ generated_userdata_vmanage }}"
    mode: "0644"


- name: "Create an image from a VHD for vManage: {{ hostname }}-image"
  azure.azcollection.azure_rm_image:
    resource_group: "{{ az_resource_group }}"
    name: "{{ hostname }}-image"
    location: "{{ az_location }}"
    os_type: "Linux"
    hyper_v_generation: "V1"
    source: "{{ az_vmanage_image_vhd_source }}"

- name: "Create VM for vmanage: {{ hostname }}"
  azure.azcollection.azure_rm_virtualmachine:
    resource_group: "{{ az_resource_group }}"
    name: "{{ hostname }}"
    vm_size: "{{ az_vmanage_vm_size }}"
    admin_username: "{{ admin_username }}-tmp"  # Not included in cloud init
    admin_password: "{{ admin_password }}"
    managed_disk_type: "Premium_LRS"
    os_disk_size_gb: 30
    os_disk_name: "{{ hostname }}-os-disk"
    os_type: "Linux"
    os_disk_caching: "ReadWrite"
    ephemeral_os_disk: false
    network_interfaces: "{{ nics_ids_list }}"
    image:
      name: "{{ hostname }}-image"
      resource_group: "{{ az_resource_group }}"
    boot_diagnostics:
      enabled: true
      type: "managed"
    data_disks:
      - lun: 10
        disk_size_gb: 100
        managed_disk_type: Premium_LRS
        storage_container_name: "{{ hostname }}-datadisk1"
    tags:
      Name: "{{ hostname }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
    custom_data: "{{ lookup('file', generated_userdata_vmanage) }}"

- name: "Store vManage instance details for deployment_results"
  ansible.builtin.set_fact:
    instance:
      hostname: "{{ hostname }}"
      system_ip: "{{ system_ip }}"
      admin_username: "{{ admin_username }}"
      admin_password: "{{ admin_password }}"
      mgmt_public_ip: "{{ vmanage_mgmt_public_ip }}"
      transport_public_ip: "{{ vmanage_transport_public_ip }}"
      cluster_private_ip: "{{ vmanage_cluster_private_ip | default(omit) }}"
      persona: "{{ vmanage_persona }}"
  changed_when: true
  notify: Show deployment_facts

- name: "Update deployment facts - vManage - that will be consumed by vManage-client in Ansible"
  ansible.builtin.set_fact:
    deployment_facts:
      vmanage_instances: "{{ deployment_facts.vmanage_instances + [instance] }}"
      vbond_instances: "{{ deployment_facts.vbond_instances }}"
      vsmart_instances: "{{ deployment_facts.vsmart_instances }}"
