# Copyright 2024 Cisco Systems, Inc. and its affiliates
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

---

# For cedge
#
# 2 aws_network_interface
# 2 aws_network_interface_attachment
# 2 aws_eip
# 1 ec2 instance


# NICs
- name: Filter required subnets for instance creation. Set aws_mgmt_subnet and aws_transport_subnet facts
  ansible.builtin.set_fact:
    aws_mgmt_subnet: "{{ aws_subnets_config | selectattr('tags.type', 'equalto', 'mgmt') | list | first }}"
    aws_transport_subnet: "{{ aws_subnets_config | selectattr('tags.type', 'equalto', 'transport') | list | first }}"

- name: Create network interfaces for cedge
  amazon.aws.ec2_eni:
    subnet_id: "{{ subnet_item.id }}"
    description: Network interface for SD-WAN Controller
    security_groups: "{{ aws_security_group_config.group_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "nic-{{ subnet_item.tags.Name }}"
      Creator: "{{ aws_tag_creator }}"
      Machine: "{{ hostname }}"
      VPN: "{{ subnet_item.tags.VPN }}"
      type: "{{ subnet_item.tags.type }}"
  register: network_interfaces_cedge
  loop: "{{ aws_subnets_config }}"
  loop_control:
    loop_var: subnet_item
    label: "nic-{{ subnet_item.tags.Name }}"
  when: subnet_item.tags.type != "cluster"

- name: Set aws_network_interfaces fact with a list of interfaces for cEdge device
  ansible.builtin.set_fact:
    aws_network_interfaces: "{{ network_interfaces_cedge.results | selectattr('interface', 'defined') | map(attribute='interface') | list }}"

- name: Filter aws_network_interfaces for instance creation. Set aws_mgmt_nic and aws_transport_nic facts
  ansible.builtin.set_fact:
    aws_mgmt_nic: "{{ aws_network_interfaces | selectattr('tags.type', 'equalto', 'mgmt') | list | first }}"
    aws_transport_nic: "{{ aws_network_interfaces | selectattr('tags.type', 'equalto', 'transport') | list | first }}"
    aws_service_nics: "{{ aws_network_interfaces | selectattr('tags.type', 'equalto', 'service') | list | default(omit) }}"

# EIPs
- name: Associate EIP with mgmt network interface
  amazon.aws.ec2_eip:
    device_id: "{{ interface_item.id }}"
    region: "{{ aws_region }}"
    in_vpc: true
    state: present
    tags:
      Name: "eip-for-{{ interface_item.tags.Name }}"
      Creator: "{{ aws_tag_creator }}"
      Machine: "{{ hostname }}"
      VPN: "{{ interface_item.tags.VPN }}"
  register: eip_edge
  loop: "{{ [aws_mgmt_nic, aws_transport_nic] + (aws_service_nics | default([])) }}"  # We do loop starting with mgmt nic, so we know results[0] is mgmt ip
  loop_control:
    loop_var: interface_item
    label: "eip-for-{{ interface_item.tags.Name }}"
  retries: 3
  delay: 3
  until: eip_edge is succeeded


# cloud-init
- name: Set path for bootstrap configuration
  ansible.builtin.set_fact:
    userdata_cedge_templated: "{{ userdata_cedge_path }}-{{ hostname }}"
  changed_when: true

- name: Template cloud-init data to userdata file for cedge
  ansible.builtin.template:
    src: ./bootstrap_cedge.j2
    dest: "{{ userdata_cedge_templated }}"
    mode: "0644"
  vars:
    enterprise_root_ca: "{{ lookup('file', enterprise_ca_cert_path | default(results_dir~'/certificates/ca.crt')) }}"

- name: Set interfaces fact
  ansible.builtin.set_fact:
    interfaces:
      - id: "{{ aws_mgmt_nic.id }}"
        device_index: 0
        description: "{{ aws_mgmt_nic.tags.Name }}"
      - id: "{{ aws_transport_nic.id }}"
        device_index: 1
        description: "{{ aws_transport_nic.tags.Name }}"

- name: Append service interfaces
  ansible.builtin.set_fact:
    interfaces: "{{ interfaces + [{'id': nic.id, 'device_index': index + 2, 'description': nic.tags.Name}] }}"
  loop: "{{ (aws_service_nics | default([])) }}"
  loop_control:
    index_var: index
    loop_var: nic
  when: aws_service_nics is defined

- name: Launch cedge
  amazon.aws.ec2_instance:
    count: 1
    instance_type: "{{ aws_cedge_instance_type }}"
    image:
      id: "{{ aws_cedge_ami_id }}"
    state: present
    vpc_subnet_id: "{{ aws_mgmt_subnet.id }}"
    region: "{{ aws_region }}"
    key_name: "{{ aws_key_name | default('') | bool | ternary(aws_key_name, omit) }}"
    network:
      assign_public_ip: false
      interfaces: "{{ interfaces }}"
    name: "{{ hostname }}"
    tags:
      Name: "{{ hostname }}"
      Creator: "{{ aws_tag_creator }}"
    user_data: "{{ lookup('file', userdata_cedge_templated) }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_size: 23
          delete_on_termination: true
  register: ec2_cedge

- name: Set service_interfaces fact
  ansible.builtin.set_fact:
    service_interfaces: []

- name: Append to service_interfaces
  ansible.builtin.set_fact:
    service_interfaces: "{{ service_interfaces + [{'addr': nic.private_ip_address, 'index': index + 2}] }}"
  loop: "{{ aws_service_nics }}"
  loop_control:
    loop_var: nic
    index_var: index
  when: aws_service_nics is defined

- name: Store cEdge instance details for deployment_results
  ansible.builtin.set_fact:
    instance:
      hostname: "{{ hostname }}"
      system_ip: "{{ system_ip }}"
      admin_username: "admin"
      admin_password: "{{ admin_password }}"
      mgmt_public_ip: "{{ eip_edge.results[0].public_ip }}"
      transport_public_ip: "{{ eip_edge.results[1].public_ip }}"
      service_interfaces: "{{ service_interfaces | default(omit) }}"
      uuid: "{{ uuid }}"
      site_id: "{{ site_id }}"
  changed_when: true
  register: _edge_facts
  retries: 3
  delay: 5
  until: _edge_facts is succeeded

- name: Update deployment facts - that will be consumed by vManage-client in Ansible
  ansible.builtin.set_fact:
    deployment_facts:
      deployed_edge_instances: "{{ deployment_facts.deployed_edge_instances + [instance] }}"

- name: Copy ec2 cedge resources information to log file
  ansible.builtin.blockinfile:
    create: true
    state: present
    mode: "0644"
    insertafter: EOF
    dest: "{{ aws_deployed_edges_data }}"
    marker: "\n--------------    ec2 Edge   --------------\n"
    content: "{{ ec2_cedge | to_nice_yaml }}"

- name: Allow traffic outside VPC for cEdge IP addresses
  amazon.aws.ec2_security_group:
    name: "{{ aws_discovered_security_group.group_name }}"
    description: "Security Group for SD-WAN instances"
    vpc_id: "{{ aws_vpc_config.id }}"
    region: "{{ aws_region }}"
    purge_rules: false
    purge_tags: false
    purge_rules_egress: false
    rules:
      - proto: all  # proto all means: `ports: all`
        cidr_ip: "{{ eip_edge.results[0].public_ip }}/32"
        rule_desc: "{{ hostname }} - mgmt (VPN 512)"
      - proto: all
        cidr_ip: "{{ eip_edge.results[1].public_ip }}/32"
        rule_desc: "{{ hostname }} - transport (VPN 0)"
    rules_egress: []
  register: allow_traffic
  retries: 3
  delay: 3
  until: allow_traffic is succeeded
