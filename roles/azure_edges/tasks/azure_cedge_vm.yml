# Copyright 2024 Cisco Systems, Inc. and its affiliates
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

---

- name: "Set facts for subnets used in vManage deployment"
  ansible.builtin.set_fact:
    transport_subnet: "{{ az_subnets | selectattr('type', 'equalto', 'transport') | first }}"
    mgmt_subnet: "{{ az_subnets | selectattr('type', 'equalto', 'mgmt') | first }}"

- name: "Create public IP addresses for machine: {{ hostname }}"
  azure.azcollection.azure_rm_publicipaddress:
    resource_group: "{{ az_resource_group }}"
    allocation_method: static
    name: "public-ip-{{ hostname }}-vpn-{{ subnet_item.VPN }}"
    tags:
      Name: "public-ip-{{ hostname }}"
      Creator: "{{ az_tag_creator }}"
      Machine: "{{ hostname }}"
      VPN: "{{ subnet_item.VPN }}"
      Subnet: "{{ subnet_item.name }}"
      type: "{{ subnet_item.type }}"
  loop:
    - "{{ mgmt_subnet }}"
    - "{{ transport_subnet }}"
  loop_control:
    loop_var: subnet_item
  register: public_ip_addresses

- name: "Get info about NSG: {{ az_network_security_group }}"
  azure.azcollection.azure_rm_securitygroup_info:
    resource_group: "{{ az_resource_group }}"
    name: "{{ az_network_security_group }}"
  register: az_res_gr

- name: "Extend Network Security Group for machine, NSG: {{ az_network_security_group }}"
  azure.azcollection.azure_rm_securitygroup:
    resource_group: "{{ az_resource_group }}"
    name: "{{ az_network_security_group }}"
    rules:
      - name: "{{ public_ip_state.state.name }}"
        protocol: "*"
        destination_port_range: "*"
        source_port_range: "*"
        source_address_prefix: "{{ public_ip_state.state.ip_address }}"
        access: Allow
        priority: "{{ 1500 + ((az_res_gr.securitygroups | first).rules | length) + 1 + my_idx }}"
        direction: Inbound
    tags:
      Name: "{{ az_network_security_group }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
  loop: "{{ public_ip_addresses.results }}"
  loop_control:
    loop_var: public_ip_state
    index_var: my_idx
    label: public_ip_state.state.name
  when: public_ip_state.state.name not in az_res_gr.securitygroups | map(attribute='rules') | flatten | map(attribute='name') | list

- name: "Create virtual network interface cards"
  azure.azcollection.azure_rm_networkinterface:
    resource_group: "{{ az_resource_group }}"
    name: "nic-{{ hostname }}-vpn-{{ public_ip_state.state.tags.VPN }}"
    virtual_network: "{{ az_virtual_network }}"
    subnet_name: "{{ public_ip_state.state.tags.Subnet }}"
    security_group: "{{ az_network_security_group }}"
    ip_configurations:
      - name: "ipconfig-vpn-{{ public_ip_state.state.tags.VPN }}"
        public_ip_address_name: "{{ public_ip_state.state.name }}"
        private_ip_allocation_method: "Dynamic"
    tags:
      Name: "nic-{{ hostname }}-vpn-{{ public_ip_state.state.tags.VPN }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
      VPN: "{{ public_ip_state.state.tags.VPN }}"
      type: "{{ public_ip_state.state.tags.type }}"
  loop: "{{ public_ip_addresses.results }}"
  loop_control:
    loop_var: public_ip_state
    index_var: my_idx
    label: public_ip_state.state.name
  register: cedge_nics

- name: "Create private virtual network interface cards"
  azure.azcollection.azure_rm_networkinterface:
    resource_group: "{{ az_resource_group }}"
    name: "nic-{{ hostname }}-vpn-{{ subnet.VPN }}"
    virtual_network: "{{ az_virtual_network }}"
    subnet_name: "{{ subnet.name }}"
    security_group: "{{ az_network_security_group }}"
    ip_configurations:
      - name: "ipconfig-vpn-{{ subnet.VPN }}"
        private_ip_allocation_method: "Dynamic"
    tags:
      Name: "nic-{{ hostname }}-vpn-{{ subnet.VPN }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
      VPN: "{{ subnet.VPN }}"
      type: "{{ subnet.type }}"
  loop: "{{ az_subnets }}"
  loop_control:
    loop_var: subnet
    index_var: my_idx
    label: subnet.name
  register: cedge_private_nics
  when: subnet.type == "service"

- name: Set az_network_interfaces_cedge fact with a list of interfaces for cedge
  ansible.builtin.set_fact:
    az_network_interfaces_cedge: "{{ cedge_nics.results | map(attribute='state') | list }}"
    az_private_network_interfaces_cedge: "{{ cedge_private_nics.results | selectattr('state', 'defined') | map(attribute='state') | list | default([]) }}"
    az_public_ip_addresses_cedge: "{{ public_ip_addresses.results | map(attribute='state') | list }}"

- name: Append to az_network_interfaces_cedge
  ansible.builtin.set_fact:
    az_network_interfaces_cedge: "{{ az_network_interfaces_cedge + az_private_network_interfaces_cedge }}"

- name: Filter az_network_interfaces_cedge for instance creation. Set az_mgmt_nic and az_transport_nic facts
  ansible.builtin.set_fact:
    az_mgmt_nic: "{{ az_network_interfaces_cedge | selectattr('tags.type', 'equalto', 'mgmt') | list | first }}"
    az_transport_nic: "{{ az_network_interfaces_cedge | selectattr('tags.type', 'equalto', 'transport') | list | first }}"
    az_service_nics: "{{ az_network_interfaces_cedge | selectattr('tags.type', 'equalto', 'service') | list | default(omit) }}"
    az_mgmt_public_ip: "{{ az_public_ip_addresses_cedge | selectattr('tags.type', 'equalto', 'mgmt') | list | first }}"
    az_transport_public_ip: "{{ az_public_ip_addresses_cedge | selectattr('tags.type', 'equalto', 'transport') | list | first }}"

# cedge_mgmt_private_ip
- name: "Set ip addresses cedge facts"
  ansible.builtin.set_fact:
    cedge_mgmt_private_ip: "{{ az_mgmt_nic.ip_configuration.private_ip_address }}"
    cedge_transport_private_ip: "{{ az_transport_nic.ip_configuration.private_ip_address }}"
    cedge_mgmt_public_ip: "{{ az_mgmt_public_ip.ip_address }}"
    cedge_transport_public_ip: "{{ az_transport_public_ip.ip_address }}"

- name: "Set vpn0_default_gateway fact from VPN 0 subnet value"
  ansible.builtin.set_fact:
    vpn0_default_gateway: "{{ subnet.cidr | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
  loop: "{{ az_subnets }}"
  loop_control:
    loop_var: subnet
  when:
    - subnet.VPN == 0
    - subnet.type != "cluster"

- name: "Set path for bootstrap configuration: {{ userdata_cedge_path }}-{{ hostname }}"
  ansible.builtin.set_fact:
    generated_userdata_cedge: "{{ userdata_cedge_path }}-{{ hostname }}"
  changed_when: true

- name: "Template userdata file for cedge: {{ hostname }}"
  ansible.builtin.template:
    src: ./userdata_cedge.j2  # ./bond.j2 ./userdata_cedge.j2
    dest: "{{ generated_userdata_cedge }}"
    mode: "0644"

- name: "Set network_interfaces fact"
  ansible.builtin.set_fact:
    network_interfaces: "{{ [az_mgmt_nic.id, az_transport_nic.id] }}"

- name: "Append service NICs to network_interfaces fact"
  ansible.builtin.set_fact:
    network_interfaces: "{{ network_interfaces + [service_nic.id] }}"
  loop: "{{ az_service_nics }}"
  loop_control:
    loop_var: service_nic
  when: az_service_nics is defined

- name: "Create cedge VM: {{ hostname }}"
  azure.azcollection.azure_rm_virtualmachine:
    resource_group: "{{ az_resource_group }}"
    name: "{{ hostname }}"
    vm_size: "{{ az_cedge_vm_size }}"
    ssh_password_enabled: true
    admin_username: "{{ admin_username }}-tmp"
    admin_password: "{{ admin_password }}"
    managed_disk_type: "StandardSSD_ZRS"
    os_disk_size_gb: 30
    os_disk_name: "{{ hostname }}-os-disk"
    os_type: "Linux"
    os_disk_caching: "ReadWrite"
    ephemeral_os_disk: false
    linux_config:
      disable_password_authentication: false
    network_interfaces: "{{ network_interfaces }}"
    image:
      offer: "{{ az_cedge_image_offer }}"
      publisher: "{{ az_cedge_image_publisher }}"
      sku: "{{ az_cedge_image_sku }}"
      version: "{{ az_cedge_image_version }}"
    plan:
      name: "{{ az_cedge_image_sku }}"
      product: "{{ az_cedge_image_offer }}"
      publisher: "{{ az_cedge_image_publisher }}"
    boot_diagnostics:
      enabled: true
      type: "managed"
    tags:
      Name: "{{ hostname }}"
      Creator: "{{ az_tag_creator }}"
      Organization: "{{ organization_name }}"
    custom_data: "{{ lookup('file', generated_userdata_cedge) }}"

- name: Set service_interfaces fact
  ansible.builtin.set_fact:
    service_interfaces: []

- name: Append to service_interfaces
  ansible.builtin.set_fact:
    service_interfaces: "{{ service_interfaces + [{'addr': nic.ip_configuration.private_ip_address, 'index': index + 2}] }}"
  loop: "{{ az_service_nics }}"
  loop_control:
    loop_var: nic
    index_var: index
  when: az_service_nics is defined

- name: Store cEdge instance details for deployment_results
  ansible.builtin.set_fact:
    instance:
      hostname: "{{ hostname }}"
      system_ip: "{{ system_ip }}"
      admin_username: "{{ admin_username }}"
      admin_password: "{{ admin_password }}"
      mgmt_public_ip: "{{ cedge_mgmt_public_ip }}"
      transport_public_ip: "{{ cedge_transport_public_ip }}"
      service_interfaces: "{{ service_interfaces | default(omit) }}"
      uuid: "{{ uuid }}"
      site_id: "{{ site_id }}"
  changed_when: true
  notify: Show deployment_facts

- name: Update deployment facts - cedge - that will be consumed by vManage-client in Ansible
  ansible.builtin.set_fact:
    deployment_facts:
      deployed_edge_instances: "{{ deployment_facts.deployed_edge_instances + [instance] }}"
